{"version":3,"sources":["serviceWorker.js","api/api.js","Redux/App-reducer.js","Redux/redux-store.js","App.js","AppContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","getAPI","axios","inicialState","dollar","euro","date","AppReducer","state","action","type","redusers","combineReducers","App","store","createStore","applyMiddleware","thunkMiddleware","props","className","formatDate","getDate","getMonth","getFullYear","id","onClick","e","getDollar","getEuro","getRate","href","AppContainer","this","Date","React","Component","connect","dispatch","then","response","data","Valute","EUR","Value","setEuroAC","USD","setDollarAC","setRateAC","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9f60f354.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as axios from \"axios\";\r\n\r\nexport const getAPI = {\r\n    getRateAPI() {\r\n        return axios.get('https://www.cbr-xml-daily.ru/daily_json.js')\r\n    },\r\n};","import {getAPI} from \"../api/api\";\r\n\r\n\r\nconst SET_INITIALIZED = 'SET_INITIALIZED';\r\nconst SET_DOLLAR = 'SET_DOLLAR';\r\nconst SET_EURO = 'SET_EURO';\r\nconst SET_DATE= 'SET_DATE';\r\n\r\n\r\nlet inicialState = {\r\n    dollar: null,\r\n    euro: null,\r\n    date:null\r\n};\r\n\r\nconst AppReducer = (state = inicialState, action) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                dollar: action.dollar,\r\n                euro: action.euro,\r\n            };\r\n        case SET_DOLLAR:\r\n            return {\r\n                ...state,\r\n                dollar: action.dollar,\r\n            };\r\n        case SET_EURO:\r\n            return {\r\n                ...state,\r\n                euro: action.euro,\r\n            };\r\n        case SET_DATE:\r\n            return { ...state, date: action.date};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setRateAC = (dollar, euro) => ({\r\n    type: SET_INITIALIZED,\r\n    dollar,\r\n    euro,\r\n\r\n});\r\nexport const setDollarAC = (dollar) => ({\r\n    type: SET_DOLLAR,\r\n    dollar,\r\n});\r\nexport const setEuroAC = (euro) => ({\r\n    type: SET_EURO,\r\n    euro,\r\n});\r\nexport const setDate=(date)=>({type: SET_DATE, date});\r\n\r\n\r\nexport const getRate = () => (dispatch) => {\r\n    return getAPI.getRateAPI().then(response => {\r\n\r\n        let dollar = response.data.Valute.USD.Value;\r\n        let euro = response.data.Valute.EUR.Value;\r\n        dispatch(setRateAC(dollar, euro));\r\n    });\r\n};\r\nexport const getDollar = () => (dispatch) => {\r\n    getAPI.getRateAPI().then(response => {\r\n\r\n        let dollar = response.data.Valute.USD.Value;\r\n        dispatch(setDollarAC(dollar));\r\n    });\r\n};\r\nexport const getEuro = () => (dispatch) => {\r\n    getAPI.getRateAPI().then(response => {\r\n        let euro = response.data.Valute.EUR.Value;\r\n        dispatch(setEuroAC(euro));\r\n    })\r\n};\r\nexport const getDate = () => (dispatch) => {\r\n    return getAPI.getRateAPI().then(response => {\r\n        dispatch(setDate(response.data.Date));\r\n    });\r\n};\r\nexport default AppReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport AppReducer from \"./App-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet redusers =combineReducers({\r\n    App:AppReducer,\r\n});\r\n\r\nlet store = createStore(redusers,applyMiddleware(thunkMiddleware));\r\nwindow.store= store;\r\n\r\nexport default store;","import React from 'react';\r\nimport \"./App.css\"\r\n\r\nconst App = (props) => {\r\n    return (<div>\r\n            <h1>Актуальный курс валют</h1>\r\n            <div className=\"container\">\r\n                <section className=\"total\">\r\n                    <div className=\"total__header\">\r\n                        <h3>Курс на {props.formatDate.getDate() > 9 ? props.formatDate.getDate() : \"0\" + props.formatDate.getDate()}.\r\n                            {props.formatDate.getMonth() > 9 ? props.formatDate.getMonth() : \"0\" + props.formatDate.getMonth()}.\r\n                            {props.formatDate.getFullYear()}\r\n                        </h3>\r\n\r\n                    </div>\r\n                    <div className=\"total__main\">\r\n                        <div className=\"total__main-item total__income\">\r\n                            <h4>Доллар </h4>\r\n\r\n                            <p className=\"total__money total__money-income\">\r\n                                {props.dollar} ₽\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"total__main-item total__expenses\">\r\n                            <h4>Евро</h4>\r\n                            <p className=\"total__money total__money-expenses\">\r\n                                {props.euro} ₽\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n\r\n                <section className=\"operation\">\r\n                    <h3>Операции</h3>\r\n                    <div id=\"form\">\r\n                        <label>\r\n                            <button type=\"submit\" className=\"operation__add\" onClick={(e) => {\r\n                                props.getDollar()\r\n                            }}>Получить курс доллара\r\n                            </button>\r\n                        </label>\r\n                        <label>\r\n                            <button type=\"submit\" className=\"operation__add\" onClick={(e) => {\r\n                                props.getEuro()\r\n                            }}>Получить курс Евро\r\n                            </button>\r\n                        </label>\r\n                        <button type=\"submit\" className=\"operation__add\" onClick={(e) => {\r\n                            props.getRate()\r\n                        }}>Получить все курсы\r\n                        </button>\r\n                    </div>\r\n                </section>\r\n                <p><a href=\"https://www.cbr-xml-daily.ru/\" className=\"cb-href\">Курсы ЦБ РФ в XML и JSON, API</a></p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n};\r\nexport default App;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {getDate, getDollar, getEuro, getRate} from \"./Redux/App-reducer\";\r\nimport App from \"./App\";\r\n\r\n\r\nclass AppContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getDate();\r\n    }\r\n\r\n    render() {\r\n        let formatDate = new Date(this.props.date);\r\n        return (\r\n            <App dollar={this.props.dollar} euro={this.props.euro} getEuro={this.props.getEuro}\r\n                 getDollar={this.props.getDollar} getRate={this.props.getRate}\r\n                 formatDate={formatDate}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dollar: state.App.dollar,\r\n        euro: state.App.euro,\r\n        date: state.App.date,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    getEuro, getDollar, getRate, getDate\r\n})(AppContainer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./Redux/redux-store.js\";\r\nimport AppContainer from \"./AppContainer\"\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}