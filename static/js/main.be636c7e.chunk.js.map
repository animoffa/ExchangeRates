{"version":3,"sources":["serviceWorker.js","api/api.js","Redux/App-reducer.js","Redux/redux-store.js","App.js","AppContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","getAPI","axios","inicialState","dollar","euro","date","AppReducer","state","action","type","redusers","combineReducers","App","store","createStore","applyMiddleware","thunkMiddleware","props","Month","formatDate","getMonth","MonthToPrint","className","getDate","getFullYear","id","onClick","e","getDollar","getEuro","getRate","href","AppContainer","this","getActualDate","Date","React","Component","connect","dispatch","then","response","data","Valute","EUR","Value","setEuroAC","USD","setDollarAC","setRateAC","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be636c7e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as axios from \"axios\";\r\n\r\nexport const getAPI = {\r\n    getRateAPI() {\r\n        return axios.get('https://www.cbr-xml-daily.ru/daily_json.js')\r\n    },\r\n};","import {getAPI} from \"../api/api\";\r\n\r\n\r\nconst SET_INITIALIZED = 'SET_INITIALIZED';\r\nconst SET_DOLLAR = 'SET_DOLLAR';\r\nconst SET_EURO = 'SET_EURO';\r\nconst SET_DATE= 'SET_DATE';\r\n\r\n\r\nlet inicialState = {\r\n    dollar: null,\r\n    euro: null,\r\n    date:null\r\n};\r\n\r\nconst AppReducer = (state = inicialState, action) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                dollar: action.dollar,\r\n                euro: action.euro,\r\n            };\r\n        case SET_DOLLAR:\r\n            return {\r\n                ...state,\r\n                dollar: action.dollar,\r\n            };\r\n        case SET_EURO:\r\n            return {\r\n                ...state,\r\n                euro: action.euro,\r\n            };\r\n        case SET_DATE:\r\n            return { ...state, date: action.date};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setRateAC = (dollar, euro) => ({\r\n    type: SET_INITIALIZED,\r\n    dollar,\r\n    euro,\r\n\r\n});\r\nexport const setDollarAC = (dollar) => ({\r\n    type: SET_DOLLAR,\r\n    dollar,\r\n});\r\nexport const setEuroAC = (euro) => ({\r\n    type: SET_EURO,\r\n    euro,\r\n});\r\nexport const setDate=(date)=>({type: SET_DATE, date});\r\n\r\n\r\nexport const getRate = () => (dispatch) => {\r\n    return getAPI.getRateAPI().then(response => {\r\n\r\n        let dollar = response.data.Valute.USD.Value;\r\n        let euro = response.data.Valute.EUR.Value;\r\n        dispatch(setRateAC(dollar, euro));\r\n    });\r\n};\r\nexport const getDollar = () => (dispatch) => {\r\n    getAPI.getRateAPI().then(response => {\r\n        let dollar = response.data.Valute.USD.Value;\r\n        dispatch(setDollarAC(dollar));\r\n    });\r\n};\r\nexport const getEuro = () => (dispatch) => {\r\n    getAPI.getRateAPI().then(response => {\r\n        let euro = response.data.Valute.EUR.Value;\r\n        dispatch(setEuroAC(euro));\r\n    })\r\n};\r\nexport const getActualDate = () => (dispatch) => {\r\n    return getAPI.getRateAPI().then(response => {\r\n        debugger;\r\n        dispatch(setDate(response.data.Date));\r\n    });\r\n};\r\nexport default AppReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport AppReducer from \"./App-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet redusers =combineReducers({\r\n    App:AppReducer,\r\n});\r\n\r\nlet store = createStore(redusers,applyMiddleware(thunkMiddleware));\r\nwindow.store= store;\r\n\r\nexport default store;","import React from 'react';\nimport \"./App.css\"\n\nconst App = (props) => {\n    let Month= props.formatDate.getMonth()+1;\n     let MonthToPrint= Month > 9 ? Month : \"0\" + Month;\n\n    return (<div>\n            <h1>Актуальный курс валют</h1>\n            <div className=\"container\">\n                <section className=\"total\">\n                    <div className=\"total__header\">\n                        <h3>Последнее обновление курса: {props.formatDate.getDate() > 9 ? props.formatDate.getDate() : \"0\" + props.formatDate.getDate()}.\n                            {MonthToPrint}.\n                            {props.formatDate.getFullYear()}\n                        </h3>\n\n                    </div>\n                    <div className=\"total__main\">\n                        <div className=\"total__main-item total__income\">\n                            <h4>Доллар </h4>\n\n                            <p className=\"total__money total__money-income\">\n                                {props.dollar} ₽\n                            </p>\n                        </div>\n                        <div className=\"total__main-item total__expenses\">\n                            <h4>Евро</h4>\n                            <p className=\"total__money total__money-expenses\">\n                                {props.euro} ₽\n                            </p>\n                        </div>\n                    </div>\n                </section>\n\n                <section className=\"operation\">\n                    <h3>Операции</h3>\n                    <div id=\"form\">\n                        <label>\n                            <button type=\"submit\" className=\"operation__add\" onClick={(e) => {\n                                props.getDollar()\n                            }}>Получить курс доллара\n                            </button>\n                        </label>\n                        <label>\n                            <button type=\"submit\" className=\"operation__add\" onClick={(e) => {\n                                props.getEuro()\n                            }}>Получить курс Евро\n                            </button>\n                        </label>\n                        <button type=\"submit\" className=\"operation__add\" onClick={(e) => {\n                            props.getRate()\n                        }}>Получить все курсы\n                        </button>\n                    </div>\n                </section>\n                <p><a href=\"https://www.cbr-xml-daily.ru/\" className=\"cb-href\">Курсы ЦБ РФ в XML и JSON, API</a></p>\n            </div>\n        </div>\n\n    )\n};\nexport default App;","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {getActualDate, getDollar, getEuro, getRate} from \"./Redux/App-reducer\";\nimport App from \"./App\";\n\n\nclass AppContainer extends React.Component {\n    componentDidMount() {\n        this.props.getActualDate();\n    }\n\n    render() {\n        let formatDate = new Date(this.props.date);\n        return (\n            <App dollar={this.props.dollar} euro={this.props.euro} getEuro={this.props.getEuro}\n                 getDollar={this.props.getDollar} getRate={this.props.getRate}\n                 formatDate={formatDate} date={this.props.date}/>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        dollar: state.App.dollar,\n        euro: state.App.euro,\n        date: state.App.date,\n    }\n};\n\nexport default connect(mapStateToProps, {\n    getEuro, getDollar, getRate, getActualDate\n})(AppContainer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/redux-store.js\";\nimport AppContainer from \"./AppContainer\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}